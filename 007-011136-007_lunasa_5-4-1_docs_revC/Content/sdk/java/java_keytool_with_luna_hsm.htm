<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="index.xml" data-mc-path-to-help-system="../../../" data-mc-conditions="Primary.Default" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="SDK Reference Guide|Java Interfaces">
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Using Java Keytool with Luna HSM</title>
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../Resources/TableStyles/Breadcrumbs.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/SafeNet_Template.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../index.html#sdk/java/java_keytool_with_luna_hsm.htm">Open topic with navigation</a>
        </p>
        <table style="width: 100%;border-spacing: 0px 0px;mc-table-style: url('../../Resources/TableStyles/Breadcrumbs.css');border-left-style: none;border-left-width: 1px;border-left-color: #000000;border-right-style: none;border-right-width: 1px;border-right-color: #000000;border-top-style: none;border-top-width: 0px;border-top-color: #000000;border-bottom-style: solid;border-bottom-width: 2px;border-bottom-color: #e6e6e6;" class="TableStyle-Breadcrumbs" cellspacing="0">
            <col style="width: 41px;" class="TableStyle-Breadcrumbs-Column-Column1" />
            <col class="TableStyle-Breadcrumbs-Column-Column1" />
            <tbody>
                <tr class="TableStyle-Breadcrumbs-Body-Body1">
                    <th class="TableStyle-Breadcrumbs-BodyB-Column1-Body1">
                        <p class="home" style="font-weight: normal;"><a href="../../Home_sa.htm">Home</a> &gt;
                        </p>
                    </th>
                    <th class="TableStyle-Breadcrumbs-BodyA-Column1-Body1">
                        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">  <![CDATA[ ]]></span><span class="MCBreadcrumbsSelf">SDK Reference Guide</span><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="java.htm">Java Interfaces</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Using Java Keytool with Luna HSM</span>
                        </div>
                    </th>
                </tr>
            </tbody>
        </table>
        <h2 class="pageBreak">Using Java Keytool with Luna HSM</h2>
        <p>This page describes using Java keytool with Luna HSM, to implement a keychain. </p>
        <h2>Luna SA 5 JSP configuration</h2>
        <p>Luna JSP is installed as part of the Luna Client software installation. After that, two additional steps are required for a Linux platform.</p>
        <ol>
            <li value="1" data-mc-autonum="&lt;b /&gt;"><span class="autonumber"><span><b></b></span></span>Copy the library file to the JDK/JRE installation directory tree. &#160;&#160;<br /><code>root@c-sa5:~# cp -p /usr/safenet/lunaclient/jsp/lib/LunaProvider.jar $JAVA_HOME/jre/lib/ext/</code> <br /><code>root@c-sa5:~# cp -p /usr/safenet/lunaclient/jsp/lib/libLunaAPI.so $JAVA_HOME/jre/lib/ext/</code> <![CDATA[ ]]></li>
            <li value="2" data-mc-autonum="&lt;b /&gt;"><span class="autonumber"><span><b></b></span></span>Modify the file $JAVA_HOME/jre/lib/security/java.security to add the Luna provider (otherwise JSP dynamic registration will be needed in the Java code). &#160;&#160;&#160;<br /><code>security.provider.3=com.safenetinc.luna.provider.LunaProvider</code> <![CDATA[ ]]></li>
        </ol>
        <p>Your decision where to place the LunaProvider will depend on your specific environment. It does not have to be the default (security.provider.1). It might be best to have the provider at the bottom. (<a href="../../install/software/linux_install.htm" class="MCXref xref "><span style="color: #6c286b;" class="mcFormatColor">"Linux Luna Client Installation &#160;"</span></a>)</p>
        <p>Alternatively, you can choose to perform JSP dynamic registration in your Java code. <a href="dynamic_registration_sample.htm" class="MCXref xref "><span style="color: #6c286b;" class="mcFormatColor">"JSP Dynamic Registration Sample"</span></a> <![CDATA[ ]]></p>
        <h3>Java -- Encryption policy files for unlimited strength ciphers</h3>
        <p>Additionally, you might need to apply the unlimited strength ciphers policy. The unlimited strength ciphers policy files can be downloaded from Oracle.</p>
        <p>The US_export_policy.jar and local_policy.jar are to be copied to JAVA_HOME/jre/lib/security (or the equivalent directory that applies to your setup).</p><pre xml:space="preserve">[root@my-sa5client]# echo $JAVA_HOME &#160;&#160;</pre><pre xml:space="preserve">/usr/java/default &#160;&#160;&#160;</pre><pre xml:space="preserve">[root@my-sa5client]# cp -p local_policy.jar /usr/java/default/jre/lib/security/ &#160;&#160;</pre><pre xml:space="preserve">[root@my-sa5client]# cp -p US_export_policy.jar /usr/java/default/jre/lib/security/ &#160;&#160;</pre>
        <p>&#160;</p>
        <h2>Keytool Usage and Examples</h2>
        <p>Elsewhere in this documentation it is suggested that you use the provided "salogin" tool if your software is not HSM-aware. When using Java, that is not necessary. Instead, you can manually create a keystore file to specify your HSM partition. This can be specified by partition label or by slot number. Two sample keystore file contents are shown below. The naming of the files is not important - only the contents.</p>
        <p>The keytool examples below refer to a keystore file named bylabel.keystore. Its content is just one line:</p>
        <p><code>tokenlabel:a-partition-name</code> <![CDATA[ ]]></p>
        <p>where a-partition-name is the name of the partition you want the Java client to use.</p>
        <p>Here is the (one line) content of a keystore file that specifies the partition by slot number:</p>
        <p><code>slot:1 </code> <![CDATA[ ]]></p>
        <p>where 1 is the slot number of the partition you want the Java client to use.</p>
        <p>To test that the Java configuration is correct, execute:</p>
        <p><code>my-sa5client:~/luna-keystores$ keytool -list -v -storetype Luna -keystore bylabel.keystore</code> &#160;&#160;&#160;</p>
        <p>The system requests the password of the partition and shows its contents.</p>
        <p>Here is a sample command to create an RSA 2048 bit key with SHA256withRSA self-signed certificate. This example uses java 6, other versions might be slightly different.</p>
        <p class="code">keytool -genkeypair -alias keyLabel -keyalg RSA -keysize 2048 -sigalg SHA256withRSA  -storetype Luna -keystore bylabel.keystore -validity 365</p><pre xml:space="preserve">Enter keystore password:</pre><pre xml:space="preserve">What is your first and last name?</pre><pre xml:space="preserve">&#160;&#160;[Unknown]:  mike</pre><pre xml:space="preserve">What is the name of your organizational unit?</pre><pre xml:space="preserve">&#160;&#160;[Unknown]:  appseng</pre><pre xml:space="preserve">What is the name of your organization?</pre><pre xml:space="preserve">&#160;&#160;[Unknown]:  safenet</pre><pre xml:space="preserve">What is the name of your City or Locality?</pre><pre xml:space="preserve">&#160;&#160;[Unknown]:  ottawa</pre><pre xml:space="preserve">What is the name of your State or Province?</pre><pre xml:space="preserve">&#160;&#160;[Unknown]:  on</pre><pre xml:space="preserve">What is the two-letter country code for this unit?</pre><pre xml:space="preserve">&#160;&#160;[Unknown]:  ca</pre><pre xml:space="preserve">Is CN=mike, OU=appseng, O=safenet, L=ottawa, ST=on, C=ca correct?</pre><pre xml:space="preserve">&#160;&#160;[no]:  yes</pre><pre xml:space="preserve">Enter key password for &lt;keyLabel&gt;</pre><pre xml:space="preserve">&#160;&#160;(RETURN if same as keystore password):
</pre>
        <p>With the Luna provider there is no concept of a key password and anything entered is ignored.</p>
        <p>The following is a more elaborate sequence of keytool usage where the final goal is to have the private key generated in the HSM through keytool “linked” to its certificate.</p>
        <h3>Import CA certificate</h3>
        <p>It is mandatory to import the CA certificate – keytool verifies the chain before importing a client certificate:</p><pre xml:space="preserve">my-sa5client:~/luna-keystores$ keytool -importcert -storetype Luna -keystore bylabel.keystore -alias root-ugoca -file Ugo_CA.crt<br /><br /></pre>
        <p>It is not required to import this certificate in the Java default cacerts keystore. &#160;&#160;</p>
        <h3>Generate private key</h3>
        <p>Generate the private key. It is NOT important that the sigalg specified matches the one used by the CA. You can also have OU, O, L, ST, and C different from the ones in the CA certificate.</p><pre xml:space="preserve">my-sa5client:~/luna-keystores$ keytool -genkeypair -alias java-client2-key -keyalg RSA -keysize 2048 -sigalg SHA256withRSA -storetype Luna -keystore bylabel.keystore</pre><pre xml:space="preserve">Enter keystore password:</pre><pre xml:space="preserve">What is your first and last name?</pre><pre xml:space="preserve">[Unknown]:  java-client2</pre><pre xml:space="preserve">What is the name of your organizational unit?</pre><pre xml:space="preserve">[Unknown]:  SE</pre><pre xml:space="preserve">What is the name of your organization?</pre><pre xml:space="preserve">[Unknown]:  SFNT</pre><pre xml:space="preserve">What is the name of your City or Locality?</pre><pre xml:space="preserve">[Unknown]:  bgy</pre><pre xml:space="preserve">What is the name of your State or Province?</pre><pre xml:space="preserve">[Unknown]:  bg</pre><pre xml:space="preserve">What is the two-letter country code for this unit?</pre><pre xml:space="preserve">[Unknown]:  IT</pre><pre xml:space="preserve">Is CN=java-client2, OU=SE, O=SFNT, L=bgy, ST=bg, C=IT correct?</pre><pre xml:space="preserve">[no]:  yes</pre><pre xml:space="preserve">Enter key password for &lt;java-client2-key&gt;</pre><pre xml:space="preserve">(RETURN if same as keystore password):<br /><br /></pre>
        <p class="code">Verify that the private key is in the Luna partition:</p><pre xml:space="preserve">my-sa5client:~/luna-keystores$ keytool -list -v -storetype Luna -keystore bylabel.keystore</pre><pre xml:space="preserve">Enter keystore password:</pre><pre xml:space="preserve">Keystore type: LUNA</pre><pre xml:space="preserve">Keystore provider: LunaProvider</pre><pre xml:space="preserve">Your keystore contains 2 entries</pre><pre xml:space="preserve">Alias name: root-ugoca</pre><pre xml:space="preserve">Creation date: Oct 4, 2012</pre><pre xml:space="preserve">Entry type: trustedCertEntry</pre><pre xml:space="preserve">Owner: EMAILADDRESS=ugo@computer.org, CN=Ugo CA, OU=SE, O=SFNT, L=bgy, ST=bg, C=IT</pre><pre xml:space="preserve">Issuer: EMAILADDRESS=ugo@computer.org, CN=Ugo CA, OU=SE, O=SFNT, L=bgy, ST=bg, C=IT</pre><pre xml:space="preserve">Serial number: 1</pre><pre xml:space="preserve">Valid from: Thu Oct 04 09:02:00 CEST 2012 until: Tue Oct 04 09:02:00 CEST 2022</pre><pre xml:space="preserve">Certificate fingerprints:</pre><pre xml:space="preserve"> &#160;&#160;&#160;&#160;&#160;MD5:  A2:15:4F:94:70:2B:D2:F7:C0:96:B1:47:F2:1D:03:E9</pre><pre xml:space="preserve"> &#160;&#160;&#160;&#160;&#160;SHA1: B3:4A:68:0A:8D:12:39:86:11:CE:EF:22:1B:D1:DE:8D:E9:19:2B:F4</pre><pre xml:space="preserve"> &#160;&#160;&#160;&#160;&#160;Signature algorithm name: SHA256withRSA</pre><pre xml:space="preserve"> &#160;&#160;&#160;&#160;&#160;Version: 3</pre><pre xml:space="preserve">*******************************************</pre><pre xml:space="preserve">*******************************************</pre><pre xml:space="preserve">Alias name: java-client2-key</pre><pre xml:space="preserve">Creation date: Oct 4, 2012</pre><pre xml:space="preserve">Entry type: PrivateKeyEntry</pre><pre xml:space="preserve">Certificate chain length: 1</pre><pre xml:space="preserve">Certificate[1]:</pre><pre xml:space="preserve">Owner: CN=java-client2, OU=SE, O=SFNT, L=bgy, ST=bg, C=IT</pre><pre xml:space="preserve">Issuer: CN=java-client2, OU=SE, O=SFNT, L=bgy, ST=bg, C=IT</pre><pre xml:space="preserve">Serial number: 506d42dd</pre><pre xml:space="preserve">Valid from: Thu Oct 04 10:03:41 CEST 2012 until: Wed Jan 02 09:03:41 CET 2013</pre><pre xml:space="preserve">Certificate fingerprints:</pre><pre xml:space="preserve"> &#160;&#160;&#160;&#160;&#160;MD5:  7A:37:72:6B:8A:05:B6:49:91:70:0F:C4:04:1F:69:D9</pre><pre xml:space="preserve"> &#160;&#160;&#160;&#160;&#160;SHA1: 05:CD:9F:A5:37:0B:A6:A3:65:24:56:40:5E:29:2D:95:2D:53:8F:5F</pre><pre xml:space="preserve"> &#160;&#160;&#160;&#160;&#160;Signature algorithm name: SHA256withRSA</pre><pre xml:space="preserve"> &#160;&#160;&#160;&#160;&#160;Version: 3  <br /></pre>
        <h3>Create the CSR</h3>
        <p>Create the CSR to be submitted to the CA.</p><pre xml:space="preserve">my-sa5client:~/luna-keystores$ keytool -certreq -alias java-client2-key -file client2-ugoca.csr -storetype Luna -keystore bylabel.keystore</pre><pre xml:space="preserve">Enter keystore password:</pre>
        <p>&#160;</p>
        <p>Now have the CSR signed by the CA. Have the issued certificate exported to include the certificate chain. Without the chain, keytool fails with the error:</p><pre xml:space="preserve">java.lang.Exception: Failed to establish chain from reply</pre>
        <p>&#160;</p>
        <p>If you do not have the chain, you can use the steps  in the section below to build the chain yourself.</p>
        <p> To translate a PKCS#7 exported certificate from DER format to PEM format use the following:</p><pre xml:space="preserve">my-sa5client $ openssl pkcs7 -inform der -in Luna_Key.p7b -outform pem -out Luna_Key-pem.p7b</pre>
        <p class="code">&#160;</p>
        <p>Microsoft CA exports certificates with chain only in PKCS#7 PEM encoded format.</p>
        <h3>Import client certificate</h3>
        <p>Now import the client certificate:</p><pre xml:space="preserve">user@myserver:~/luna-keystores$ keytool -importcert -storetype Luna -keystore bylabel.keystore -alias java-client2-key -file java-client2.crt</pre><pre xml:space="preserve">Enter keystore password:</pre><pre xml:space="preserve">Certificate reply was installed in keystore &#160;&#160;</pre>
        <p class="code">&#160;</p>
        <p>Ensure that it is linked to the private key generated previously – the chain length is not 1 (“Certificate chain length: 2)</p><pre xml:space="preserve">user@myserver:~/luna-keystores$ keytool -list -v -storetype Luna -keystore bylabel.keystore &#160;&#160;<br />Enter keystore password:</pre><pre xml:space="preserve">Keystore type: LUNA &#160;&#160;<br />Keystore provider: LunaProvider</pre><pre xml:space="preserve">Your keystore contains 2 entries</pre><pre xml:space="preserve">Alias name: root-ugoca &#160;<br />Creation date: Oct 4, 2012 &#160;&#160;<br />Entry type: trustedCertEntry</pre><pre xml:space="preserve">Owner: EMAILADDRESS=ugo@computer.org, CN=Ugo CA, OU=SE, O=SFNT, L=bgy, ST=bg, C=IT &#160;&#160;<br />Issuer: EMAILADDRESS=ugo@computer.org, CN=Ugo CA, OU=SE, O=SFNT, L=bgy, ST=bg, C=IT &#160;&#160;<br />Serial number: 1 &#160;&#160;<br />Valid from: Thu Oct 04 09:02:00 CEST 2012 until: Tue Oct 04 09:02:00 CEST 2022 &#160;&#160;<br />Certificate fingerprints: &#160;&#160;<br /> &#160;&#160;&#160;&#160;&#160;MD5:  A2:15:4F:94:70:2B:D2:F7:C0:96:B1:47:F2:1D:03:E9 &#160;&#160;<br /> &#160;&#160;&#160;&#160;&#160;SHA1: B3:4A:68:0A:8D:12:39:86:11:CE:EF:22:1B:D1:DE:8D:E9:19:2B:F4 &#160;&#160;<br /> &#160;&#160;&#160;&#160;&#160;Signature algorithm name: SHA256withRSA &#160;&#160;<br /> &#160;&#160;&#160;&#160;&#160;Version: 3</pre><pre xml:space="preserve">******************************************* &#160;&#160;<br />******************************************* &#160;&#160;</pre><pre xml:space="preserve">Alias name: java-client2-key &#160;&#160;<br />Creation date: Oct 4, 2012 &#160;&#160;<br />Entry type: PrivateKeyEntry &#160;&#160;<br />Certificate chain length: 2 &#160;&#160;<br />Certificate[1]: &#160;&#160;<br />Owner: CN=java-client2, OU=SE, O=SFNT, L=bgy, ST=bg, C=IT &#160;&#160;<br />Issuer: EMAILADDRESS=ugo@computer.org, CN=Ugo CA, OU=SE, O=SFNT, L=bgy, ST=bg, C=IT &#160;&#160;<br />Serial number: 5 &#160;&#160;<br />Valid from: Thu Oct 04 10:07:00 CEST 2012 until: Fri Oct 04 10:07:00 CEST 2013 &#160;&#160;<br />Certificate fingerprints: &#160;&#160;<br /> &#160;&#160;&#160;&#160;&#160;&#160;MD5:  4B:F0:9E:BC:EB:6A:88:2B:87:3A:76:35:7C:DE:4B:B4 &#160;&#160;<br /> &#160;&#160;&#160;&#160;&#160;&#160;SHA1: F1:0C:BC:E3:A1:97:E4:8B:24:2D:44:43:7A:EA:71:52:B3:C3:20:D7 &#160;&#160;<br /> &#160;&#160;&#160;&#160;&#160;&#160;Signature algorithm name: SHA256withRSA &#160;&#160;<br /> &#160;&#160;&#160;&#160;&#160;&#160;Version: 3 &#160;&#160;<br />Certificate[2]: &#160;&#160;<br />Owner: EMAILADDRESS=ugo@computer.org, CN=Ugo CA, OU=SE, O=SFNT, L=bgy, ST=bg, C=IT &#160;&#160;<br />Issuer: EMAILADDRESS=ugo@computer.org, CN=Ugo CA, OU=SE, O=SFNT, L=bgy, ST=bg, C=IT &#160;&#160;<br />Serial number: 1 &#160;&#160;<br />Valid from: Thu Oct 04 09:02:00 CEST 2012 until: Tue Oct 04 09:02:00 CEST 2022 &#160;&#160;<br />Certificate fingerprints: &#160;&#160;<br /> &#160;&#160;&#160;&#160;&#160;&#160;MD5:  A2:15:4F:94:70:2B:D2:F7:C0:96:B1:47:F2:1D:03:E9 &#160;&#160;<br /> &#160;&#160;&#160;&#160;&#160;&#160;SHA1: B3:4A:68:0A:8D:12:39:86:11:CE:EF:22:1B:D1:DE:8D:E9:19:2B:F4 &#160;&#160;<br /> &#160;&#160;&#160;&#160;&#160;&#160;Signature algorithm name: SHA256withRSA &#160;&#160;<br /> &#160;&#160;&#160;&#160;&#160;&#160;Version: 3 &#160;&#160;</pre>
        <p>&#160;</p>
        <h3>How to build a certificate with chain ...</h3>
        <p>When you receive the client certificate without the chain, it is possible to build a PKCS#7 certificate that includes the chain (and then feed it to keytool -importcert). In short, the “single” certificates without the chain can be “stacked” together by manually editing a PEM cert file; this PEM cert file can then be translated into a PKCS#7. How? Like this: &#160;</p>
        <ol>
            <li value="1" data-mc-autonum="&lt;b /&gt;"><span class="autonumber"><span><b></b></span></span>Prerequisites. Have all the certs in .crt format. The cert in this format is represented as an ASCII file starting with the line &#160;&#160;<br /><code>-----BEGIN CERTIFICATE-----</code> <br />and ending with &#160;&#160;<br /><code>-----END CERTIFICATE-----</code> <br />For example, if the client cert is issued by a subCA and the subCA is signed by a root CA, you will have 3 cert files – the client cert, the subCA cert, and the root CA cert. If the certs are not in .crt format, openssl can be used to transform the format that you have into .crt format. See notes below. &#160;&#160;</li>
            <li value="2" data-mc-autonum="&lt;b /&gt;"><span class="autonumber"><span><b></b></span></span>Open a new text file, calling it, for example, cert-with-chain.crt. Insert into this file the content of the certificates in the chains. For the above example, you must insert FIRST the client cert, THEN the subCA cert, THEN the root CA cert. The content of the file would then resemble the following: &#160;&#160;<br /><code>-----BEGIN CERTIFICATE----- </code> <br /><code>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;-- client cert goes here</code> <br /><code>-----END CERTIFICATE-----</code> <br /><code>-----BEGIN CERTIFICATE-----</code> <br /><code> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;-- subCA cert goes here</code> <br /><code>-----END CERTIFICATE-----</code> <br /><code>-----BEGIN CERTIFICATE-----</code> <br /><code> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;-- root CA cert goes here</code> <br /><code>-----END CERTIFICATE-----</code> <![CDATA[ ]]></li>
            <li value="3" data-mc-autonum="&lt;b /&gt;"><span class="autonumber"><span><b></b></span></span>Use the following openssl command to convert the new certificate with chain, that you just created above, to a PKCS#7 certificate with chain: <br /> <code>my-sa5 $ openssl crl2pkcs7 -nocrl -certfile HSM_Luna-manual-chain.crt -out HSM_Luna-manual-chain.p7b -certfile root_CA.crt</code> <![CDATA[ ]]></li>
        </ol>
        <p>Keytool is then able to import this .p7b certificate into the Luna keystore and correctly validate the chain.</p>
        <h3>Additional minor notes</h3>
        <ol>
            <li value="1" data-mc-autonum="&lt;b /&gt;"><span class="autonumber"><span><b></b></span></span>Command to add a CA to the default CA cert store “cacerts”: &#160;&#160;<br /><code>root@myserver:~# keytool -importcert -trustcacerts -alias root-ugoca -file /home/ugo/luna-keystores/Ugo_CA.crt -keystore /etc/java-6-sun/security/cacerts</code> <![CDATA[ ]]></li>
            <li value="2" data-mc-autonum="&lt;b /&gt;"><span class="autonumber"><span><b></b></span></span>Use the following openssl command to convert a PKCS#7 certificate DER-encoded into a PKCS#7 PEM-encoded certificate: <br /> <code>user@myserver:~/tmp/$ openssl pkcs7 -inform der -in java-client2.p7b -out java-client2-pem.p7b</code> <![CDATA[ ]]></li>
            <li value="3" data-mc-autonum="&lt;b /&gt;"><span class="autonumber"><span><b></b></span></span>Use the following openssl command to convert a PKCS#7 DER-encoded certificate into a .crt PEM certificate : &#160;&#160;<br /><code>user@myserver:~/tmp/$ openssl pkcs7 -print_certs -inform der -in Ugo_CA.p7b -out Ugo_CA-p7-2-crt.crt</code> <![CDATA[ ]]></li>
            <li value="4" data-mc-autonum="&lt;b /&gt;"><span class="autonumber"><span><b></b></span></span>Use the following openssl command to convert a PEM certificate with chain to a PKCS#7 with chain: &#160;&#160;<br /><code>user@myserver:~/tmp/$ openssl crl2pkcs7 -nocrl -certfile HSM_Luna-manual-chain.crt -out HSM_Luna-manual-chain.p7b -certfile Ugo_CA.crt</code> <![CDATA[ ]]></li>
        </ol>
        <p>&#160;</p>
        <p>&#160;</p>
        <p>&#160;</p>
        <p>&#160;</p>
        <p>&#160;</p>
        <p class="footer"><span class="DefaultProduct">Luna SA</span> <span class="DefaultRelease">5.4.1</span> <span class="DefaultProjectTitle">Product Documentation</span> <br /><span class="DefaultPartNumber">007-011136-007</span> <span class="DefaultRevision">Rev C</span> <span style="color: #5e5e5c;"> </span> <span class="DefaultDateShort">July 2014</span> <span style="color: #5e5e5c;"> </span> <span class="DefaultCopyright">Copyright 2014</span>&#160;<span class="DefaultCompanyNameLong">SafeNet, Inc.</span> <span style="color: #5e5e5c;"> </span>All rights reserved. </p>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkBottom"><a href="../../../index.html#sdk/java/java_keytool_with_luna_hsm.htm">Open topic with navigation</a>
        </p>
    </body>
</html>